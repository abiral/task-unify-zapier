/* global describe, it, before */

require('should');

const zapier = require('zapier-platform-core');

const App = require('../index');
const appTester = zapier.createAppTester(App);

/* describe('oauth2 app', () => {
  before(() => {
    // It's a good idea to store your Client ID and Secret in the environment rather than in code.
    // This works locally via the `export` shell command and in production by using `zapier env`
    if (!process.env.CLIENT_ID || !process.env.CLIENT_SECRET) {
      throw new Error(
        'For the tests to run, you need to do `export CLIENT_ID=1234 CLIENT_SECRET=asdf`'
      );
    }
  });

  it('generates an authorize URL', () => {const bundle = {
      // In production, these will be generated by Zapier and set automatically
      inputData: {
        state: '4444',
        redirect_uri: 'https://zapier.com/'
      },
      environment: {
        // These will come from your local environment. When running in production, Zapier builds a bundle
        // that includes environment variables you have set with `zapier env` command.
        CLIENT_ID: process.env.CLIENT_ID,
        CLIENT_SECRET: process.env.CLIENT_SECRET
      }
	};
	
	//console.log(`${process.env.BASE_URL}/oauth/authorize?client_id=${process.env.CLIENT_ID}&state=4444&redirect_uri=https%3A%2F%2Fzapier.com%2F&response_type=code`);

    return appTester(App.authentication.oauth2Config.authorizeUrl, bundle).then(
      authorizeUrl => {
        authorizeUrl.should.eql(
          `${process.env.BASE_URL}/oauth/authorize?client_id=${process.env.CLIENT_ID}&state=4444&redirect_uri=https%3A%2F%2Fzapier.com%2F&response_type=code`
        );
      }
    );
  });

  it('can fetch an access token', () => {
    const bundle = {
      inputData: {
        // In production, Zapier passes along whatever code your API set in the query params when it redirects
        // the user's browser to the `redirect_uri`
		//code: 'one_time_code'
		code: process.env.CODE,
      },
      environment: {
        CLIENT_ID: process.env.CLIENT_ID,
        CLIENT_SECRET: process.env.CLIENT_SECRET
      },
      cleanedRequest: {
        querystring: {
          accountDomain: 'test-account',
          //code: 'one_time_code'
		code: process.env.CODE,
        }
      },
      rawRequest: {
        querystring: '?accountDomain=test-account&code=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODk2Mjg3MzEsIl9pZCI6IjVkYmVmNDRlNjg4Mzk3NGUwZDJhYjJiZCIsImlhdCI6MTU4OTYyNzgzMX0.85EgHAkJLrxq8jUUxp-FQWOiSUxHbZRtwEYYdeP_p9MeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODk2Mjg3MzEsIl9pZCI6IjVkYmVmNDRlNjg4Mzk3NGUwZDJhYjJiZCIsImlhdCI6MTU4OTYyNzgzMX0.85EgHAkJLrxq8jUUxp-FQWOiSUxHbZRtwEYYdeP_p9M'
      }
    };

    return appTester(
      App.authentication.oauth2Config.getAccessToken,
      bundle
    ).then(result => {
		//console.log(`${result.access_token} === process.env.ACCESS_TOKEN`)
		console.log(result);
		result.access_token.should.eql(process.env.ACCESS_TOKEN);
      result.refresh_token.should.eql(process.env.REFRESH_TOKEN);
    });
  });

  it('can refresh the access token', () => {
    const bundle = {
      // In production, Zapier provides these. For testing, we have hard-coded them.
      // When writing tests for your own app, you should consider exporting them and doing process.env.MY_ACCESS_TOKEN
      authData: {
        access_token: process.env.ACCESS_TOKEN,
        refresh_token: process.env.REFRESH_TOKEN
      },
      environment: {
        CLIENT_ID: process.env.CLIENT_ID,
        CLIENT_SECRET: process.env.CLIENT_SECRET
      }
    };

    return appTester(
      App.authentication.oauth2Config.refreshAccessToken,
      bundle
    ).then(result => {
      result.access_token.should.eql('a_new_token');
    });
  });

  it('includes the access token in future requests', () => {
    const bundle = {
      authData: {
        access_token: 'a_token',
        refresh_token: 'a_refresh_token'
      }
    };

    return appTester(App.authentication.test, bundle).then(result => {
      result.should.have.property('username');
      result.username.should.eql('Bret');
    });
  });
}); */

describe('My App', () => {
  it('should load recipes', done => {
    const triggerPointer = 'triggers.recipe'
    const bundle = {
      // NEW CODE
      inputData: {
        style: 'mediterranean'
      }
    }

    appTester(App.triggers.recipe.operation.perform, bundle)
      .then(results => {
        should(results.length).above(1)

        const firstResult = results[0]
        console.log('test result: ', firstResult)
        should(firstResult.name).eql('name 1')
        should(firstResult.directions).eql('directions 1')

        done()
      })
      .catch(done)
  })
})